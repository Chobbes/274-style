#+TITLE: Programming Style Suggestions
#+AUTHOR: Calvin Beck
#+OPTIONS: ^:{}

* Summary
  Quick summary of all of the things mentioned here. You should read
  the rest for more details / the rationale behind some of this.

  1. Use spaces instead of tabs for indentation.
  2. Minimum of 4 spaces per indentation level.
  3. Maximum of 8 spaces per indentation level.
  4. Use the same amount of spaces per indentation level within a file!
  5. Avoid single character variable names usually.
  6. Use descriptive variable names when possible.
  7. Try to avoid global variables.
  8. Use constant variables instead of numbers like "35" in your code.
  9. Comment your code well, but don't just reiterate what the code says
  10. If you're not sure lean towards having more comments!
  11. Make sure your code compiles and runs!
  12. Use newlines to space out logically distinct pieces of your code.
  13. Keep lines under 80 characters in length.
  14. Be consistent within a file - don't change how you are formatting
      your code randomly.
* Indentation
** Use Spaces
   Spaces should be used for indentation instead of actual tabs. The
   rationale for this is that tabs may display differently on
   different computers and editors, so an amount of indentation that
   is acceptable for you may not appear nicely on somebody else's
   computer. With a [[http://en.wikipedia.org/wiki/Monospaced_font][fixed-width font]], which everybody should use,
   spaces will always have the same amount of indentation relative to
   the text.

   Note that the editors that we will be using (Emacs and Vim) can be
   configured so that the tab key does indentation with spaces.
** Too Little Indentation
   Indentation should be a minimum of 4 spaces. Four spaces is a good
   amount of indentation, but you can probably go as high as 8 spaces
   of indentation if you prefer more. The rationale for this is that
   indentation is used to separate code inside of different blocks,
   and any less indentation is more difficult to notice at a
   glance. Too much indentation can also make things unreadable
   because there will be too much blank space on any given line.

   #+BEGIN_SRC c
     int stuff = 0;
     stuff++;
     
     if (1 == stuff) {
         /* 4 spaces - Easier to see this is inside the if */
         stuff++;
     }
     
     if (2 == stuff) {
       /* 2 spaces - Harder to tell */
       stuff++;
     }
     
     if (3 == stuff) {
     /* None - Things are getting crowded now, and this is impossible */
     stuff++;
     }
   #+END_SRC

   This effect is made much worse if the blocks for the if statements
   are much larger, or there is a lot of code around an if
   statement. If it's indented by a large enough amount you can tell
   right away what a statement is nested in. You can tell if it's in a
   loop, or in an if statement inside of the loop very easily.
** Inconsistent Indentation
   Of the problems with indentation, this one is probably the
   worst. You must use a consistent amount of indentation within a
   file. If you are indenting with 4 spaces you *always* indent by 4
   spaces for each level of indentation. Changing the amount of
   indentation randomly makes code *very* hard to read. Here is a bad
   example:

   #+BEGIN_SRC c
     int stuff = 0;
     
          stuff++;
        stuff += 2;
     
                 stuff = stuff * 7;
     
     if (stuff) {
         stuff = 8;
     }
          else {
        stuff = 9;
               }
   #+END_SRC

   It's very hard to tell what goes where here, it's certainly much
   more difficult to read than a more properly indented piece of code
   which does the same thing:

   #+BEGIN_SRC c
     int stuff = 0;
     
     stuff++;
     stuff += 2;
     
     stuff = stuff * 7;
     
     if (stuff) {
         stuff = 8;
     }
     else {
         stuff = 9;
     }
   #+END_SRC

   We will also be using Python next term as well, and Python is picky
   about this kind of stuff - your code likely won't work if you have
   inconsistent indentation, so it's a good idea to get in the habit
   of doing this consistently.
* Variables
** Single Character Variable Names
   You should usually avoid using single characters for variable names
   when you can have a more descriptive one. With a single character
   variable name you can not tell what it is supposed to represent
   very easily in most cases. For instance the names 'length', and
   'width' are much more appropriate than 'l', and 'w', because
   'length' and 'width' actually tell you what the variable is
   supposed to represent. If you don't know what a variable is for,
   how are you supposed to know what to store in the variable, and
   what calculations you can perform with the contents of the
   variable?

   There are a couple of exceptions for this. For instance if you want
   to represent a point on a Cartesian plane you would probably have a
   structure like the following

   #+BEGIN_SRC c
     typedef struct Point {
         int x;
         int y;
     } Point;
   #+END_SRC

   In this case 'x' and 'y' are acceptable because they are actually
   the most descriptive names for the position on the 'x' axis, and
   'y' axis respectively. That's just what those things are called!

   Another exception (which you won't encounter too much) is when
   things are general, or abstract enough that you can't actually have
   a specific name for something because you don't know what that
   variable will actually hold. A good example of this is something
   like a function for the quadratic formula, which solves for $x$ in
   equations of the form $ax^2 + bx + c = 0$. The quadratic formula is
   given by

   \[x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}\]

   so, if you want to solve for $x$ you need to deal with the
   variables $a$, $b$, and $c$... But in this case they are just
   numbers and are not always tied to something more specific, so you
   can't really give them a better name than that!

   If you can give a variable a name that tells you what it
   represents, then you should. It makes it much easier to understand
   what's going on when you have something like

   #+BEGIN_SRC c
     area = length * width;
   #+END_SRC

   As opposed to

   #+BEGIN_SRC c
     a = l * w;
   #+END_SRC

   At a glance you can tell exactly what the first one is doing - it's
   an area calculation for a rectangle. The second one is a little bit
   less obvious. Maybe it calculates the area of a rectangle, but
   maybe it finds out the number of aardvarks by multiplying the
   amount of lemurs and wombats together.
** Use Descriptive Variable Names
   Similar to the last rule, you should always try to use descriptive
   variable names. Names like "variable" are just as useless as a name
   like "v". I still don't know what "variable" might represent. Make
   your variable names reflect what you want to store in them. It's
   just like how you should store cumin instead of rat poison in the
   jar labeled 'cumin_jar'. You don't want to accidentally poison your
   food (or have somebody else, unaware of the rat poison, cooking in
   your kitchen poison their food). Similarly, you don't want to
   accidentally use the wrong values in your program. If you do that
   it won't work! Often other people have to read and modify / use
   your code, so it needs to be readable to make sure they don't
   accidentally use the wrong variables as well!

   To put it simply, if your variables are not named descriptively
   then you, and the people reading / using your code, are much more
   likely to get confused and make mistakes - which will make your
   program not work as intended!
** Global Variables
   Avoid using global variables when possible. Since any function can
   read / write to a global variable it's difficult to keep track of
   what value is stored within the global. If a function is called you
   have to make sure it does not change the global variable in an
   unexpected way which might introduce bugs into your program.

   If your function relies upon a global variable it is much more
   difficult to reason about too. Consider the program

   #+BEGIN_SRC c
     #include <Arduino.h>
     
     /* Evil global variable! */
     int global = 0;
     
     int function(int number)
     {
         /* Increment our global variable */
         ++global;
     
         return global * number;
     }
     
     void setup()
     {
         Serial.begin(9600);
     
         /* Print the result of the function a few times to show global's affects */
         Serial.println(function(4));
         Serial.println(function(4));
         Serial.println(function(4));
     
         /* We can even change the result of the function by changing global! */
         global = 0;
     
         Serial.println(function(4));
     
         /* Hmmmm, what's global now? I just set it to 0, right!? */
         Serial.print("Global: ");
         Serial.println(global);
     }
     
     void loop() {}
   #+END_SRC

   You might expect calling *function(4)* to return the same result
   every time, after all it's the same piece of code, right? Well,
   running this program you should see

   #+BEGIN_EXAMPLE
     4
     8
     12
     4
     Global: 1
   #+END_EXAMPLE

   Because you increment *global* each time the function is called,
   and the result of the function relies upon that external piece of
   state (the return value is multiplied by it), we don't get the same
   return value each time! We multiply by a slightly larger global
   variable each time we call the function.

   In more complicated functions this can be a nightmare when
   debugging, because when you look at your function it might appear
   like it's doing the right thing, but if a value of some global that
   it relies upon is incorrect the return value of the function will
   also be incorrect (even if there is nothing wrong with that
   function!)

   Also note that it can cause a bit more confusion too! For instance
   in *setup()* we very clearly set *global* to 0, so we might think
   that it still has that value later on. But, *global* is in fact
   changed, it's just that the change is hidden away in the function
   call!

   It is often very desirable to have what is called a [[http://en.wikipedia.org/wiki/Pure_function][pure function]],
   which is basically just a fancy way of saying "a function that will
   always give you the same return values for the same inputs, and
   does not change any variables which can be seen by anything else!"
   Since pure functions don't cause any side effects they are a bit
   easier to debug because you can trust that they haven't messed with
   any other part of your program, and no other part of your program
   can mess with it. A pure function is isolated from the rest of your
   code, so any mistakes made in the pure function can't break
   anything else, and mistakes made elsewhere can't break your pure
   function! It makes them easy to test too!
** Constants and Magic Numbers
   As opposed to variables global constants are actually a good thing!
   You want to avoid "/magic numbers/" in your code whenever
   possible. A magic number is essentially any literal numerical value
   put in your code, that could instead have a name assigned to
   it. For example,

   #+BEGIN_SRC c
     for (size_t name_index = 0; name_index < 20; ++name_index) {
         char *name = name_array[name_index];
         Serial.println(name);
     }
   #+END_SRC

   Is less readable than if you had defined somewhere in your code a
   constant like,

   #+BEGIN_SRC c
     const size_t AMOUNT_OF_NAMES = 20;
   #+END_SRC

   and then had

   #+BEGIN_SRC c
     for (size_t name_index = 0; name_index < AMOUNT_OF_NAMES; ++name_index) {
         char *name = name_array[name_index];
         Serial.println(name);
     }
   #+END_SRC

   Because you don't know what "20" represents otherwise. An
   additional advantage of doing this is that if you have a bunch of
   loops like this in your code, and you need to add another name you
   can actually just change your constant in one place, instead of
   scouring your code for all of the magic numbers that you have to
   change, which is /very/ time consuming.
* Comments
  Please comment your code. Tell us at a high level what exactly your
  code is doing. Don't tell us what every single line of code does,
  but make sure you comment anything that might be confusing. Your
  comments should describe what the overall goal of your code is, and
  what the algorithm to achieve that goal is doing. This is excessive:

  #+BEGIN_SRC c
    /* Add 1 to number */
    number = number + 1;
  #+END_SRC

  We already know that, the comment just repeats what that line of
  code already says! The code does have a voice of its own. However,
  you should try to comment what your code is doing - but you want to
  be a little less verbose than that. You want to essentially explain
  the main steps like you would if you were explaining how to do a
  math problem to somebody, and you want to make note of anything that
  can go wrong and anything that might be a little strange.

  Almost all of the code you write should have comments of some sort!

  You should have comments for your functions, for instance,
  explaining what they do, what arguments they take, and what it
  returns. It's also a /very/ good idea to make note of what global
  variables and other external factors that might affect the
  function's return values, or that the function might modify.
* Syntax Correctness
  Your code should compile when we get it. If your code does not
  compile due to a syntax error, such as a forgotten semi-colon, we
  will give you a grade of 0! Please make sure your code compiles
  before sending it to us! It's easy to check, and if you don't know
  why it doesn't compile try googling the error message (don't include
  line numbers or anything specific to your program - just the end of
  the error message), or coming to the consultation hours! Almost
  every compiler error message will have confused somebody else at
  some point, and there will be an explanation for what it might mean
  somewhere on the internet! You never make a mistake alone - somebody
  else has made it before, and you can learn from their mistakes too!

  When writing your code what you should be doing is compiling and
  testing it often to see what's working. If you do this you will
  guarantee that the code you send us compiles!
* Newlines
  You should have newlines separating distinct pieces of logic in your
  code. Some things should be grouped together, but don't be afraid to
  put a blank line between a bunch of declarations and an if statement
  / loop. New lines can make your code more readable, but do not put a
  blank line between every single line of code - that defeats the
  purpose.
* Line Length
  You should try to keep your lines under 80 characters in length as a
  general rule. If it's more than 80 characters in length it's
  probably long enough that some people will get unpredictable line
  wrapping when they view the code which can make it very hard to
  read.

  This also has the additional benefit that if your code is more than
  80 characters in length it is a good indicator that you should
  probably re-factor your code a bit to make it fit under 80
  characters. Put something in a function, or change how you are doing
  something. It may seem like a pain at first, but it will generally
  make your code much better.
* Consistency
  When you are writing code you end up making rules for how to format
  certain things. For example, you might use 4 spaces for an
  indentation level, or you might use all capital letters for the
  names of constant values. If you decide to do something one way, you
  should try to do so consistently within the file to avoid
  confusion. There may be times when you need to make an exception,
  but most of the time you are best left following any of the rules
  that you have laid out for yourself.
